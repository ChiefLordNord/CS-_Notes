// Pass by reference (official wording from nesty) - i didn't get an official wording wtf

for(const auto e: a)

// const make e const
// esentially locking in e as a certain type (int, double, etc.)

for (const auto &e: a)

//

for (auto &e: a)
    e = 55;

//sets all of a to 55

//Function Invocation - 
//Function Call -
//Function Definition -
//Function Declaration -

//Client Def - A function that invokes a function under consideration

int& b = a;

//Known as an AMPERSAND

a = b + 2

//Lvalue is a (Left hand value)
//Rvalue is b + 2 (Right hand value)

//You can have a function return a reference, meaning it is an L value

// += is a compund addition (assignment) (which ever tckles your fancy)

// * is dereference, 

// & points to adress, reference to

//nullptr - denotes a pointer to be unallocated

//Static Variables - are initialized only once and retain their value across the function incovations

-----------------------------------------------------------------------------------------------------

//Modularity - Easily seperatable into logical parts

//Object - A variable or type of class

//Class - Aggregates both data and code

//Aggregate - To gather, collect, or assemble

//Members - Variables and Functions Declared in a class

//Member Variable - Variable declared in a class definition

//Member Function - Function declared in a class definition

//Public Members - 

//Private Members - 

//Friend Function - 

int a[10] = {55}; //First element is 55, rest is 0

//UML (Unified Nodeling Language) - Diagrams that is used for simplicity and used in not quite Computer Science term

//Accessor Member Function (inspector) - does not change the state of the object

//Mutator Member Function (modifier) - changes the state of the function

//Object-Based Programming - using objects in programming but no inheritence (extended/derived classes)

//Features - member variables and member functions
    -Class Attributes - Member Variables
    -Class Operators - Member Function

-----------------------------------------------------------------------------------------------------

//Why Dynamic Memory? - 

//Copy Constructor - Initializes a new object using an existing object of the same class

//Destructor - 

//Overloaded Assignment - 

//This - A pointer to an object which the pointer function is involved

//Object State - The value of all the member variables

//Shallow Copy - memberwise copying of objct attributes (may be no good in case object has dynamically allocated members
//               and 
//                   Passing of object by reference
//                   Returning an object
//                   Object assignment

//Deep Copy - recursive (including attributes) copying of entire object

//Implicit type conversion - 

//Explicit Type Converstion - 

//Initalizer - 

//Copy and Swap Idiom - Common idiom to implement overloafed assignment

//Idiom - Techniques

//Function Template Instantiation - Produced exacutable code
//                                - Compiler generates code for each type used in the template

//Deduction - Compiler determines the type of the template parameter

//Generic Function - 

//Is Implicit - 

//Stack - data type that stores data in a first-in, last-out manner

//a = b = c - this is stackability

//Amortized Complexity - (worst case) complexity per data or operation

----------------------------------------------------------------------------------------------------

//STL ORGANIZATION

//Container - Data structure that stores values organized in a certain manner

//Iterator - A way to access the values in a container

//Algorithm - way to manipulate data through iterator regardless of container type

//Callback - reference to code, a way to customizes an algorithm's operation

//CONTAINERS

//Containers provides implemetation of commonly used data structures

//Element - stored data
//    Homogeneous - elements of only one type

//Container Kinds
//    Ordered - elements may be efficiently accessed in order
//        Squential
//        Container Adapters - limit operations of sequential containers for specialized purposed
//        Associative - element access by value : mapping from keys to values
//    Unordered associative - hash tables
//    Others - specialized purpose, legacy

//Sequential Containers

//Vector - random access to elements, amortized constant insertions in back, linear insertions elsewhere

//Deque ("deck") (double-ended queue) - random access to elements, amortized constant insertion in front/back, linear elsewhere

//List (double linked list) - linear access to elements, constant insertion/deletion once located

//std::array (C++11) – fixed size array, knows its size (unlike C-style) can be copied, returned, no insertion/deletion

//std::forward_list (singly-linked list, C++11) – forward search only, less memory for storage than list
